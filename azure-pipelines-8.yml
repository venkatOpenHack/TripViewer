# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

pool:
  default

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '12dc1cb0-03d3-4762-bf7d-9e74d692034f'
  imageRepository: 'tripvieweruserjava'
  containerRegistry: 'openhackrm78bnn5acr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/apis/user-java/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy stage
  jobs:
  - job: Deploy
    displayName: Deploy
    steps:
    - task: AzureWebAppContainer@1
      inputs:
        azureSubscription: 'OTA-PRD-1310(5)(337a5d8e-1cf6-4a6f-bc59-95ea4f64f58b)'
        appName: 'openhackrm78bnn5userjava'
        deployToSlotOrASE: true
        resourceGroupName: 'openhackrm78bnn5rg'
        slotName: 'staging'
        containers: '$(containerRegistry)/$(imageRepository):$(tag)'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          #!/bin/bash
                    set -eux
                    declare -r HOST="openhackrm78bnn5userjava-staging.azurewebsites.net/api/healthcheck/user-java"
                    
                    wait-for-url() {
                    echo "POI Checking Deployed Staging Health Status $1"
                    timeout -s TERM 45 bash -c \
                    'while [[ "$(curl -s -o /dev/null -L -w ''%{http_code}'' ${0})" != "200" ]];\
                    do echo "Waiting for ${0}" && sleep 5;\
                    done' ${1}
                    echo "OK!"
                    }
                    wait-for-url https://${HOST}
    - task: AzureAppServiceManage@0
      condition: failed() 
      inputs:
        azureSubscription: 'OTA-PRD-1310(5)(337a5d8e-1cf6-4a6f-bc59-95ea4f64f58b)'
        Action: 'Stop Azure App Service'
        WebAppName: 'openhackrm78bnn5userjava'
        SpecifySlotOrASE: true
        ResourceGroupName: 'openhackrm78bnn5rg'
        Slot: 'staging'
    - task: AzureAppServiceManage@0
      condition: succeeded() 
      inputs:
        azureSubscription: 'OTA-PRD-1310(5)(337a5d8e-1cf6-4a6f-bc59-95ea4f64f58b)'
        Action: 'Swap Slots'
        WebAppName: 'openhackrm78bnn5userjava'
        ResourceGroupName: 'openhackrm78bnn5rg'
        SourceSlot: 'staging'